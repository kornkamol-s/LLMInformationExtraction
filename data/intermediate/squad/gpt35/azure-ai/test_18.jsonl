{"input":"Question: NP complete problems contain the lowest likelihood of being located in what problem class?\n\nContext: If a problem X is in C and hard for C, then X is said to be complete for C. This means that X is the hardest problem in C. (Since many problems could be equally hard, one might say that X is one of the hardest problems in C.) Thus the class of NP-complete problems contains the most difficult problems in NP, in the sense that they are the ones most likely not to be in P. Because the problem P = NP is not solved, being able to reduce a known NP-complete problem, \u03a02, to another problem, \u03a01, would indicate that there is no known polynomial-time solution for \u03a01. This is because a polynomial-time solution to \u03a01 would yield a polynomial-time solution to \u03a02. Similarly, because all NP problems can be reduced to the set, finding an NP-complete problem that can be solved in polynomial time would mean that P = NP.","output":"['NP', 'P', 'P']"}
{"input":"Question: If P = NP is unsolved, and reduction is applied to a known NP-complete problem vis a vis \u03a02 to  \u03a01, what conclusion can be drawn for \u03a01?\n\nContext: If a problem X is in C and hard for C, then X is said to be complete for C. This means that X is the hardest problem in C. (Since many problems could be equally hard, one might say that X is one of the hardest problems in C.) Thus the class of NP-complete problems contains the most difficult problems in NP, in the sense that they are the ones most likely not to be in P. Because the problem P = NP is not solved, being able to reduce a known NP-complete problem, \u03a02, to another problem, \u03a01, would indicate that there is no known polynomial-time solution for \u03a01. This is because a polynomial-time solution to \u03a01 would yield a polynomial-time solution to \u03a02. Similarly, because all NP problems can be reduced to the set, finding an NP-complete problem that can be solved in polynomial time would mean that P = NP.","output":"['there is no known polynomial-time solution', 'no known polynomial-time solution', 'there is no known polynomial-time solution']"}
{"input":"Question: If polynomial time can be utilized within an NP-complete problem, what does the imply P is equal to?\n\nContext: If a problem X is in C and hard for C, then X is said to be complete for C. This means that X is the hardest problem in C. (Since many problems could be equally hard, one might say that X is one of the hardest problems in C.) Thus the class of NP-complete problems contains the most difficult problems in NP, in the sense that they are the ones most likely not to be in P. Because the problem P = NP is not solved, being able to reduce a known NP-complete problem, \u03a02, to another problem, \u03a01, would indicate that there is no known polynomial-time solution for \u03a01. This is because a polynomial-time solution to \u03a01 would yield a polynomial-time solution to \u03a02. Similarly, because all NP problems can be reduced to the set, finding an NP-complete problem that can be solved in polynomial time would mean that P = NP.","output":"['NP', 'NP', 'NP']"}
{"input":"Question: What hypothesis is associated with the complexity class of P viewed as a mathematical abstraction with efficient algorithmic functionality?\n\nContext: The complexity class P is often seen as a mathematical abstraction modeling those computational tasks that admit an efficient algorithm. This hypothesis is called the Cobham\u2013Edmonds thesis. The complexity class NP, on the other hand, contains many problems that people would like to solve efficiently, but for which no efficient algorithm is known, such as the Boolean satisfiability problem, the Hamiltonian path problem and the vertex cover problem. Since deterministic Turing machines are special non-deterministic Turing machines, it is easily observed that each problem in P is also member of the class NP.","output":"['Cobham\u2013Edmonds thesis', 'Cobham\u2013Edmonds thesis', 'Cobham\u2013Edmonds thesis']"}
{"input":"Question: What complexity class is commonly characterized by unknown algorithms to enhance solvability?\n\nContext: The complexity class P is often seen as a mathematical abstraction modeling those computational tasks that admit an efficient algorithm. This hypothesis is called the Cobham\u2013Edmonds thesis. The complexity class NP, on the other hand, contains many problems that people would like to solve efficiently, but for which no efficient algorithm is known, such as the Boolean satisfiability problem, the Hamiltonian path problem and the vertex cover problem. Since deterministic Turing machines are special non-deterministic Turing machines, it is easily observed that each problem in P is also member of the class NP.","output":"['NP', 'NP', 'NP']"}
{"input":"Question: In what theoretical machine is it confirmed that a problem in P belies membership in the NP class?\n\nContext: The complexity class P is often seen as a mathematical abstraction modeling those computational tasks that admit an efficient algorithm. This hypothesis is called the Cobham\u2013Edmonds thesis. The complexity class NP, on the other hand, contains many problems that people would like to solve efficiently, but for which no efficient algorithm is known, such as the Boolean satisfiability problem, the Hamiltonian path problem and the vertex cover problem. Since deterministic Turing machines are special non-deterministic Turing machines, it is easily observed that each problem in P is also member of the class NP.","output":"['Turing machines', 'deterministic Turing machines', 'deterministic Turing machines']"}
{"input":"Question: If P is ultimately proven to be equal tot NP, what effect would this have on the efficiency of problems?\n\nContext: The question of whether P equals NP is one of the most important open questions in theoretical computer science because of the wide implications of a solution. If the answer is yes, many important problems can be shown to have more efficient solutions. These include various types of integer programming problems in operations research, many problems in logistics, protein structure prediction in biology, and the ability to find formal proofs of pure mathematics theorems. The P versus NP problem is one of the Millennium Prize Problems proposed by the Clay Mathematics Institute. There is a US$1,000,000 prize for resolving the problem.","output":"['more efficient solutions', 'shown to have more efficient solutions', 'many important problems can be shown to have more efficient solutions']"}
{"input":"Question: What is a particular problem in biology that would benefit from determining that P = NP?\n\nContext: The question of whether P equals NP is one of the most important open questions in theoretical computer science because of the wide implications of a solution. If the answer is yes, many important problems can be shown to have more efficient solutions. These include various types of integer programming problems in operations research, many problems in logistics, protein structure prediction in biology, and the ability to find formal proofs of pure mathematics theorems. The P versus NP problem is one of the Millennium Prize Problems proposed by the Clay Mathematics Institute. There is a US$1,000,000 prize for resolving the problem.","output":"['protein structure prediction', 'protein structure prediction', 'protein structure prediction']"}
{"input":"Question: What is the prize offered for finding a solution to P=NP?\n\nContext: The question of whether P equals NP is one of the most important open questions in theoretical computer science because of the wide implications of a solution. If the answer is yes, many important problems can be shown to have more efficient solutions. These include various types of integer programming problems in operations research, many problems in logistics, protein structure prediction in biology, and the ability to find formal proofs of pure mathematics theorems. The P versus NP problem is one of the Millennium Prize Problems proposed by the Clay Mathematics Institute. There is a US$1,000,000 prize for resolving the problem.","output":"['$1,000,000', 'US$1,000,000', 'US$1,000,000']"}
{"input":"Question: What is the name for a problem that meets Ladner's assertion?\n\nContext: It was shown by Ladner that if P \u2260 NP then there exist problems in NP that are neither in P nor NP-complete. Such problems are called NP-intermediate problems. The graph isomorphism problem, the discrete logarithm problem and the integer factorization problem are examples of problems believed to be NP-intermediate. They are some of the very few NP problems not known to be in P or to be NP-complete.","output":"['NP-intermediate problems', 'NP-intermediate problems', 'NP-intermediate']"}
{"input":"Question: What is an example of an NP-intermediate problem not known to exist in P or NP-complete? \n\nContext: It was shown by Ladner that if P \u2260 NP then there exist problems in NP that are neither in P nor NP-complete. Such problems are called NP-intermediate problems. The graph isomorphism problem, the discrete logarithm problem and the integer factorization problem are examples of problems believed to be NP-intermediate. They are some of the very few NP problems not known to be in P or to be NP-complete.","output":"['graph isomorphism problem', 'the discrete logarithm problem', 'graph isomorphism problem, the discrete logarithm problem and the integer factorization problem']"}
{"input":"Question: What is the problem attributed to defining if two finite graphs are isomorphic?\n\nContext: The graph isomorphism problem is the computational problem of determining whether two finite graphs are isomorphic. An important unsolved problem in complexity theory is whether the graph isomorphism problem is in P, NP-complete, or NP-intermediate. The answer is not known, but it is believed that the problem is at least not NP-complete. If graph isomorphism is NP-complete, the polynomial time hierarchy collapses to its second level. Since it is widely believed that the polynomial hierarchy does not collapse to any finite level, it is believed that graph isomorphism is not NP-complete. The best algorithm for this problem, due to Laszlo Babai and Eugene Luks has run time 2O(\u221a(n log(n))) for graphs with n vertices.","output":"['The graph isomorphism problem', 'graph isomorphism', 'The graph isomorphism problem']"}
{"input":"Question: What class is most commonly not ascribed to the graph isomorphism problem in spite of definitive determination?\n\nContext: The graph isomorphism problem is the computational problem of determining whether two finite graphs are isomorphic. An important unsolved problem in complexity theory is whether the graph isomorphism problem is in P, NP-complete, or NP-intermediate. The answer is not known, but it is believed that the problem is at least not NP-complete. If graph isomorphism is NP-complete, the polynomial time hierarchy collapses to its second level. Since it is widely believed that the polynomial hierarchy does not collapse to any finite level, it is believed that graph isomorphism is not NP-complete. The best algorithm for this problem, due to Laszlo Babai and Eugene Luks has run time 2O(\u221a(n log(n))) for graphs with n vertices.","output":"['NP-complete', 'NP-complete', 'NP-complete']"}
{"input":"Question: What finite hierarchy implies that the graph isomorphism problem is NP-complete? \n\nContext: The graph isomorphism problem is the computational problem of determining whether two finite graphs are isomorphic. An important unsolved problem in complexity theory is whether the graph isomorphism problem is in P, NP-complete, or NP-intermediate. The answer is not known, but it is believed that the problem is at least not NP-complete. If graph isomorphism is NP-complete, the polynomial time hierarchy collapses to its second level. Since it is widely believed that the polynomial hierarchy does not collapse to any finite level, it is believed that graph isomorphism is not NP-complete. The best algorithm for this problem, due to Laszlo Babai and Eugene Luks has run time 2O(\u221a(n log(n))) for graphs with n vertices.","output":"['polynomial time hierarchy', 'polynomial time', 'polynomial time hierarchy']"}
{"input":"Question: What is the unproven assumption generally ascribed to the value of complexity classes?\n\nContext: Many known complexity classes are suspected to be unequal, but this has not been proved. For instance P \u2286 NP \u2286 PP \u2286 PSPACE, but it is possible that P = PSPACE. If P is not equal to NP, then P is not equal to PSPACE either. Since there are many known complexity classes between P and PSPACE, such as RP, BPP, PP, BQP, MA, PH, etc., it is possible that all these complexity classes collapse to one class. Proving that any of these classes are unequal would be a major breakthrough in complexity theory.","output":"['suspected to be unequal', 'unequal', 'Many known complexity classes are suspected to be unequal']"}
{"input":"Question: What is an expression that can be used to illustrate the suspected inequality of complexity classes?\n\nContext: Many known complexity classes are suspected to be unequal, but this has not been proved. For instance P \u2286 NP \u2286 PP \u2286 PSPACE, but it is possible that P = PSPACE. If P is not equal to NP, then P is not equal to PSPACE either. Since there are many known complexity classes between P and PSPACE, such as RP, BPP, PP, BQP, MA, PH, etc., it is possible that all these complexity classes collapse to one class. Proving that any of these classes are unequal would be a major breakthrough in complexity theory.","output":"['P \u2286 NP \u2286 PP \u2286 PSPACE', 'P \u2286 NP \u2286 PP \u2286 PSPACE', 'P \u2286 NP \u2286 PP \u2286 PSPACE']"}
{"input":"Question: In what complexity class do complement problems of NP problems exist?\n\nContext: Along the same lines, co-NP is the class containing the complement problems (i.e. problems with the yes\/no answers reversed) of NP problems. It is believed that NP is not equal to co-NP; however, it has not yet been proven. It has been shown that if these two complexity classes are not equal then P is not equal to NP.","output":"['co-NP', 'co-NP', 'co-NP']"}
{"input":"Question: How do the yes\/no answers of a complement problem of NP appear?\n\nContext: Along the same lines, co-NP is the class containing the complement problems (i.e. problems with the yes\/no answers reversed) of NP problems. It is believed that NP is not equal to co-NP; however, it has not yet been proven. It has been shown that if these two complexity classes are not equal then P is not equal to NP.","output":"['reversed', 'reversed', 'reversed']"}
{"input":"Question: What is commonly believed to be the value relationship between P and co-NP\n\nContext: Along the same lines, co-NP is the class containing the complement problems (i.e. problems with the yes\/no answers reversed) of NP problems. It is believed that NP is not equal to co-NP; however, it has not yet been proven. It has been shown that if these two complexity classes are not equal then P is not equal to NP.","output":"['not equal', 'not equal', 'not equal']"}
{"input":"Question: What variable is associated with all problems solved within logarithmic space?\n\nContext: Similarly, it is not known if L (the set of all problems that can be solved in logarithmic space) is strictly contained in P or equal to P. Again, there are many complexity classes between the two, such as NL and NC, and it is not known if they are distinct or equal classes.","output":"['L', 'L', 'L']"}
{"input":"Question: Though unkown, what are the most commonly ascribed attributes of L in relation to P\n\nContext: Similarly, it is not known if L (the set of all problems that can be solved in logarithmic space) is strictly contained in P or equal to P. Again, there are many complexity classes between the two, such as NL and NC, and it is not known if they are distinct or equal classes.","output":"['strictly contained in P or equal to P', 'contained in P or equal to P.', 'strictly contained in P or equal to P']"}
{"input":"Question: What lies between L and P that prevents a definitive determination of the relationship between L and P?\n\nContext: Similarly, it is not known if L (the set of all problems that can be solved in logarithmic space) is strictly contained in P or equal to P. Again, there are many complexity classes between the two, such as NL and NC, and it is not known if they are distinct or equal classes.","output":"['complexity classes', 'many complexity classes', 'many complexity classes']"}
{"input":"Question: What are two complexity classes between L and P?\n\nContext: Similarly, it is not known if L (the set of all problems that can be solved in logarithmic space) is strictly contained in P or equal to P. Again, there are many complexity classes between the two, such as NL and NC, and it is not known if they are distinct or equal classes.","output":"['NL and NC', 'NL and NC', 'NL and NC']"}
{"input":"Question: What is unknown about the complexity classes between L and P that further prevents determining the value relationship between L and P?\n\nContext: Similarly, it is not known if L (the set of all problems that can be solved in logarithmic space) is strictly contained in P or equal to P. Again, there are many complexity classes between the two, such as NL and NC, and it is not known if they are distinct or equal classes.","output":"['if they are distinct or equal classes', 'if they are distinct or equal classes', 'if they are distinct or equal classes']"}
{"input":"Question: If NP is not equal to P, viewed through this lens, what type of problems can also be considered intractable?\n\nContext: Problems that can be solved in theory (e.g., given large but finite time), but which in practice take too long for their solutions to be useful, are known as intractable problems. In complexity theory, problems that lack polynomial-time solutions are considered to be intractable for more than the smallest inputs. In fact, the Cobham\u2013Edmonds thesis states that only those problems that can be solved in polynomial time can be feasibly computed on some computational device. Problems that are known to be intractable in this sense include those that are EXPTIME-hard. If NP is not the same as P, then the NP-complete problems are also intractable in this sense. To see why exponential-time algorithms might be unusable in practice, consider a program that makes 2n operations before halting. For small n, say 100, and assuming for the sake of example that the computer does 1012 operations each second, the program would run for about 4 \u00d7 1010 years, which is the same order of magnitude as the age of the universe. Even with a much faster computer, the program would only be useful for very small instances and in that sense the intractability of a problem is somewhat independent of technological progress. Nevertheless, a polynomial time algorithm is not always practical. If its running time is, say, n15, it is unreasonable to consider it efficient and it is still useless except on small instances.","output":"['NP-complete problems', 'NP-complete', 'NP-complete', 'NP-complete']"}
{"input":"Question: What eponymous variation of arithmetic presents a decision problem not evidenced in P?\n\nContext: What intractability means in practice is open to debate. Saying that a problem is not in P does not imply that all large cases of the problem are hard or even that most of them are. For example, the decision problem in Presburger arithmetic has been shown not to be in P, yet algorithms have been written that solve the problem in reasonable times in most cases. Similarly, algorithms can solve the NP-complete knapsack problem over a wide range of sizes in less than quadratic time and SAT solvers routinely handle large instances of the NP-complete Boolean satisfiability problem.","output":"['Presburger arithmetic', 'Presburger', 'Presburger arithmetic']"}
{"input":"Question: Despite the Presburger problem, and in view of intractability, what has been done to establish solutions in reasonable periods of time?\n\nContext: What intractability means in practice is open to debate. Saying that a problem is not in P does not imply that all large cases of the problem are hard or even that most of them are. For example, the decision problem in Presburger arithmetic has been shown not to be in P, yet algorithms have been written that solve the problem in reasonable times in most cases. Similarly, algorithms can solve the NP-complete knapsack problem over a wide range of sizes in less than quadratic time and SAT solvers routinely handle large instances of the NP-complete Boolean satisfiability problem.","output":"['algorithms have been written', 'algorithms have been written', 'algorithms have been written that solve the problem in reasonable times in most cases']"}
{"input":"Question: What is an example of a problem to which effective algorithms have provided a solution in spite of the intractability associated with the breadth of sizes?\n\nContext: What intractability means in practice is open to debate. Saying that a problem is not in P does not imply that all large cases of the problem are hard or even that most of them are. For example, the decision problem in Presburger arithmetic has been shown not to be in P, yet algorithms have been written that solve the problem in reasonable times in most cases. Similarly, algorithms can solve the NP-complete knapsack problem over a wide range of sizes in less than quadratic time and SAT solvers routinely handle large instances of the NP-complete Boolean satisfiability problem.","output":"['NP-complete knapsack problem', 'NP-complete knapsack', 'the NP-complete knapsack problem']"}
{"input":"Question: How quickly can an algorithm solve an NP-complete knapsack problem?\n\nContext: What intractability means in practice is open to debate. Saying that a problem is not in P does not imply that all large cases of the problem are hard or even that most of them are. For example, the decision problem in Presburger arithmetic has been shown not to be in P, yet algorithms have been written that solve the problem in reasonable times in most cases. Similarly, algorithms can solve the NP-complete knapsack problem over a wide range of sizes in less than quadratic time and SAT solvers routinely handle large instances of the NP-complete Boolean satisfiability problem.","output":"['in less than quadratic time', 'less than quadratic time', 'less than quadratic time']"}
{"input":"Question: What is the example of another problem characterized by large instances that is routinely solved by SAT handlers employing efficient algorithms?\n\nContext: What intractability means in practice is open to debate. Saying that a problem is not in P does not imply that all large cases of the problem are hard or even that most of them are. For example, the decision problem in Presburger arithmetic has been shown not to be in P, yet algorithms have been written that solve the problem in reasonable times in most cases. Similarly, algorithms can solve the NP-complete knapsack problem over a wide range of sizes in less than quadratic time and SAT solvers routinely handle large instances of the NP-complete Boolean satisfiability problem.","output":"['NP-complete Boolean satisfiability problem', 'NP-complete Boolean satisfiability', 'the NP-complete Boolean satisfiability problem']"}
{"input":"Question: What paper is commonly considered the bellwether ushering in systematic studies computational complexity?\n\nContext: As Fortnow & Homer (2003) point out, the beginning of systematic studies in computational complexity is attributed to the seminal paper \"On the Computational Complexity of Algorithms\" by Juris Hartmanis and Richard Stearns (1965), which laid out the definitions of time and space complexity and proved the hierarchy theorems. Also, in 1965 Edmonds defined a \"good\" algorithm as one with running time bounded by a polynomial of the input size.","output":"['On the Computational Complexity of Algorithms', 'On the Computational Complexity of Algorithms', '\"On the Computational Complexity of Algorithms\"']"}
{"input":"Question: In what year was Hatmanis and Stearn's seminal work in computational complexity received? \n\nContext: As Fortnow & Homer (2003) point out, the beginning of systematic studies in computational complexity is attributed to the seminal paper \"On the Computational Complexity of Algorithms\" by Juris Hartmanis and Richard Stearns (1965), which laid out the definitions of time and space complexity and proved the hierarchy theorems. Also, in 1965 Edmonds defined a \"good\" algorithm as one with running time bounded by a polynomial of the input size.","output":"['1965', '1965', '1965']"}
{"input":"Question: What complex measurements were defined by \"On the Computational Complexity of Algorithms\"?\n\nContext: As Fortnow & Homer (2003) point out, the beginning of systematic studies in computational complexity is attributed to the seminal paper \"On the Computational Complexity of Algorithms\" by Juris Hartmanis and Richard Stearns (1965), which laid out the definitions of time and space complexity and proved the hierarchy theorems. Also, in 1965 Edmonds defined a \"good\" algorithm as one with running time bounded by a polynomial of the input size.","output":"['time and space', 'definitions of time and space complexity', 'time and space complexity']"}
{"input":"Question: Who provided a definition of linear bounded automata in 1960?\n\nContext: Earlier papers studying problems solvable by Turing machines with specific bounded resources include  John Myhill's definition of linear bounded automata (Myhill 1960), Raymond Smullyan's study of rudimentary sets (1961), as well as Hisao Yamada's paper on real-time computations (1962). Somewhat earlier, Boris Trakhtenbrot (1956), a pioneer in the field from the USSR, studied another specific complexity measure. As he remembers:","output":"['John Myhill', 'John Myhill', 'John Myhill']"}
{"input":"Question: Who is responsible for axiomatic complexity theory?\n\nContext: In 1967, Manuel Blum developed an axiomatic complexity theory based on his axioms and proved an important result, the so-called, speed-up theorem. The field really began to flourish in 1971 when the US researcher Stephen Cook and, working independently, Leonid Levin in the USSR, proved that there exist practically relevant problems that are NP-complete. In 1972, Richard Karp took this idea a leap forward with his landmark paper, \"Reducibility Among Combinatorial Problems\", in which he showed that 21 diverse combinatorial and graph theoretical problems, each infamous for its computational intractability, are NP-complete.","output":"['Manuel Blum', 'Manuel Blum', 'Manuel Blum']"}
{"input":"Question: What theorem was implicated by Manuel Blum's axioms?\n\nContext: In 1967, Manuel Blum developed an axiomatic complexity theory based on his axioms and proved an important result, the so-called, speed-up theorem. The field really began to flourish in 1971 when the US researcher Stephen Cook and, working independently, Leonid Levin in the USSR, proved that there exist practically relevant problems that are NP-complete. In 1972, Richard Karp took this idea a leap forward with his landmark paper, \"Reducibility Among Combinatorial Problems\", in which he showed that 21 diverse combinatorial and graph theoretical problems, each infamous for its computational intractability, are NP-complete.","output":"['speed-up theorem', 'speed-up theorem', 'speed-up theorem']"}
{"input":"Question: What is the paper written by Richard Karp in 1972 that ushered in a new era of understanding between intractability and NP-complete problems?\n\nContext: In 1967, Manuel Blum developed an axiomatic complexity theory based on his axioms and proved an important result, the so-called, speed-up theorem. The field really began to flourish in 1971 when the US researcher Stephen Cook and, working independently, Leonid Levin in the USSR, proved that there exist practically relevant problems that are NP-complete. In 1972, Richard Karp took this idea a leap forward with his landmark paper, \"Reducibility Among Combinatorial Problems\", in which he showed that 21 diverse combinatorial and graph theoretical problems, each infamous for its computational intractability, are NP-complete.","output":"['\"Reducibility Among Combinatorial Problems\"', 'Reducibility Among Combinatorial Problems', '\"Reducibility Among Combinatorial Problems\"']"}
{"input":"Question: What is another name to describe the science of teaching?\n\nContext: The role of teacher is often formal and ongoing, carried out at a school or other place of formal education. In many countries, a person who wishes to become a teacher must first obtain specified professional qualifications or credentials from a university or college. These professional qualifications may include the study of pedagogy, the science of teaching. Teachers, like other professionals, may have to continue their education after they qualify, a process known as continuing professional development. Teachers may use a lesson plan to facilitate student learning, providing a course of study which is called the curriculum.","output":"['pedagogy', 'pedagogy', 'formal education']"}
{"input":"Question: Where do most teachers get their credentials from?\n\nContext: The role of teacher is often formal and ongoing, carried out at a school or other place of formal education. In many countries, a person who wishes to become a teacher must first obtain specified professional qualifications or credentials from a university or college. These professional qualifications may include the study of pedagogy, the science of teaching. Teachers, like other professionals, may have to continue their education after they qualify, a process known as continuing professional development. Teachers may use a lesson plan to facilitate student learning, providing a course of study which is called the curriculum.","output":"['university or college.', 'university', 'university or college']"}
{"input":"Question: Where is a teacher most likely to be teaching at?\n\nContext: The role of teacher is often formal and ongoing, carried out at a school or other place of formal education. In many countries, a person who wishes to become a teacher must first obtain specified professional qualifications or credentials from a university or college. These professional qualifications may include the study of pedagogy, the science of teaching. Teachers, like other professionals, may have to continue their education after they qualify, a process known as continuing professional development. Teachers may use a lesson plan to facilitate student learning, providing a course of study which is called the curriculum.","output":"['school', 'school', 'school']"}
{"input":"Question: What is similar to vocational training?\n\nContext: A teacher's role may vary among cultures. Teachers may provide instruction in literacy and numeracy, craftsmanship or vocational training, the arts, religion, civics, community roles, or life skills.","output":"['craftsmanship', 'craftsmanship', 'craftsmanship']"}
{"input":"Question: If someone is being taught at their place of residence, what is it called?\n\nContext: In some countries, formal education can take place through home schooling. Informal learning may be assisted by a teacher occupying a transient or ongoing role, such as a family member, or by anyone with knowledge or skills in the wider community setting.","output":"['home schooling', 'home schooling', 'home schooling']"}
{"input":"Question: What is the opposite of an ongoing role of teaching?\n\nContext: In some countries, formal education can take place through home schooling. Informal learning may be assisted by a teacher occupying a transient or ongoing role, such as a family member, or by anyone with knowledge or skills in the wider community setting.","output":"['transient', 'transient', 'Informal learning']"}
{"input":"Question: What would a community member need to teach informally?\n\nContext: In some countries, formal education can take place through home schooling. Informal learning may be assisted by a teacher occupying a transient or ongoing role, such as a family member, or by anyone with knowledge or skills in the wider community setting.","output":"['knowledge or skills', 'anyone with knowledge or skills', 'knowledge or skills']"}
{"input":"Question: What type of text is the Quran?\n\nContext: Religious and spiritual teachers, such as gurus, mullahs, rabbis, pastors\/youth pastors and lamas, may teach religious texts such as the Quran, Torah or Bible.","output":"['religious', 'religious', 'religious']"}
{"input":"Question: What is another name for teaching within the family?\n\nContext: Teaching may be carried out informally, within the family, which is called homeschooling, or in the wider community. Formal teaching may be carried out by paid professionals. Such professionals enjoy a status in some societies on a par with physicians, lawyers, engineers, and accountants (Chartered or CPA).","output":"['homeschooling', 'homeschooling', 'homeschooling']"}
{"input":"Question: Who is most likely to be doing formal teaching?\n\nContext: Teaching may be carried out informally, within the family, which is called homeschooling, or in the wider community. Formal teaching may be carried out by paid professionals. Such professionals enjoy a status in some societies on a par with physicians, lawyers, engineers, and accountants (Chartered or CPA).","output":"['paid professionals.', 'professionals', 'paid professionals']"}
{"input":"Question: In addition to teaching within the family, where else is informal teaching done?\n\nContext: Teaching may be carried out informally, within the family, which is called homeschooling, or in the wider community. Formal teaching may be carried out by paid professionals. Such professionals enjoy a status in some societies on a par with physicians, lawyers, engineers, and accountants (Chartered or CPA).","output":"['the wider community', 'wider community', 'in the wider community']"}
{"input":"Question: Who is generally considered on the same level as physicians, lawyers, engineers, and accountants (Chartered or CPA)?\n\nContext: Teaching may be carried out informally, within the family, which is called homeschooling, or in the wider community. Formal teaching may be carried out by paid professionals. Such professionals enjoy a status in some societies on a par with physicians, lawyers, engineers, and accountants (Chartered or CPA).","output":"['paid professionals.', 'professionals', 'Formal teaching']"}
{"input":"Question: What could a teacher help in organizing?\n\nContext: A teacher's professional duties may extend beyond formal teaching. Outside of the classroom teachers may accompany students on field trips, supervise study halls, help with the organization of school functions, and serve as supervisors for extracurricular activities. In some education systems, teachers may have responsibility for student discipline.","output":"['school functions', 'school functions', 'school functions']"}
